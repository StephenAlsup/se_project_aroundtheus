!function(){"use strict";class e{constructor(e,t,s){let{name:n,link:o}=e;this._name=n,this._link=o,this._cardSelector=t,this._handlePreviewImage=s}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handlePreviewImage(this._name,this._link)}))}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement.querySelector(".card__image").src=this._link,this._cardElement.querySelector(".card__image").alt=this._name,this._cardElement.querySelector(".card__description").textContent=this._name,this._setEventListeners(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t,this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValid(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}toggleButtonState(){this._hasInvalidInput(this._inputEls)?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_setEventListeners(){this.toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValid(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}},s=class{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._popupElementCloseBtn=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}};class n extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t}_getInputValues(){const e=this._popupElement.querySelectorAll(".modal__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}close(){this._popupForm.reset(),super.close()}}class o{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const r={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_error",errorClass:"modal__error_visible"};const i=new class{constructor(e){let{baseUrl:t,authToken:s}=e;this._baseUrl=t,this._authToken=s}_checkResponse(e){return e.ok?e.json():Promise.reject("Error: ${res.status}")}getInitialCards(){return fetch("${this._baseUrl}/cards",{headers:{authorization:this._authToken}}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authToken}}).then(this._checkResponse)}editUserInfo(e){return console.log(e),fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:e.title,about:e.about})}).then(this._checkResponse)}editUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({avatar:e.avatar})}).then(this._checkResponse)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authToken,"Content-Type":"application/json"},body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}addCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}removeCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:{authorization:this._authToken,"Content-Type":"application/json"}}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authToken:"0b288917-ab08-48b1-b87e-440bc0c9842c"}),a=document.querySelector("#profile-edit-button"),l=document.querySelector("#profile-edit-modal").querySelector(".modal__form"),c=document.querySelector(".profile__title"),u=document.querySelector(".profile__subtitle"),d=document.querySelector("#profile-name-input"),h=document.querySelector("#profile-description-input"),_=document.querySelector(".profile__avatar-button"),m=document.querySelector(".profile__image"),p=document.querySelector(".profile__add-button"),E=document.querySelector("#add-card-modal").querySelector(".modal__form");function v(t){const s=new e(t,cardSelector,(()=>{I.open(t.name,t.link)}),(e=>{q.open(t),q.setAction((()=>{q.setButtonText(!0,"Deleting..."),i.deleteCard(e._id).then((()=>{console.log(e),e.deleteCard(),q.close()})).catch((e=>{console.error(e)})).finally((()=>{q.setButtonText(!1)}))}))}),(e=>{console.log(e._isLiked,e),e._isLiked?i.removeCardLike(e.getId()).then((()=>{e.setLikes(!1)})).catch((e=>{console.error(e)})):i.addCardLike(e.getId()).then((()=>{e.setLikes(!0)})).catch(console.error)}));k.addItem(s.getView())}const S=new class{constructor(e,t){this.name=e,this.description=t,this.avatar=avatar}getUserInfo(){return{name:this.name.textContent,description:this.description.textContent}}setUserInfo(e,t){console.log(this.name,this.description,e,t),this.name.textContent=e,this.description.textContent=t}setAvatar(e){this.avatar.src=e,this.avatar.alt=this.name.textContent}}(c,u,m),g=new n("#edit-avatar-modal",(e=>{g.setButtonText(!0),i.editUserPhoto(e).then((e=>{S.setAvatar(e.avatar),g.close()})).catch((e=>{console.error(e)})).finally((()=>{g.setButtonText(!1)}))})),b=avatarModal.querySelector(".modal__form");Promise.all([i.getUserInfo(),i.getInitialCards()]).then((e=>{let[t,s]=e;S.setUserInfo(t.name,t.about),S.setAvatar(t.avatar),console.log(s),k=new o({items:s,renderer:v},cardListSelector),k.renderItems()})).catch((e=>{console.error(e)})),a.addEventListener("click",(function(){!function(){const e=S.getUserInfo();d.value=e.name,h.value=e.description}(),w.open(),y.toggleButtonState()}));const k=new o({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=v(e);k.addItem(t)}},".cards__list");k.renderItems();const f=new n("#add-card-modal",(e=>(f.setButtonText(!0),i.addCard(e).then((e=>{console.log(e),v(e),f.close()})).catch((e=>{console.error(e)})).finally((()=>{f.setButtonText(!1)})))));f.setEventListeners();const y=new t(r,l),L=new t(r,E),C=new t(r,b);y.enableValidation(),L.enableValidation(),C.enableValidation();const w=new n("#profile-edit-modal",(function(e){S.setUserInfo(e.name,e.description),w.close()}));w.setEventListeners(),p.addEventListener("click",(()=>{f.open(),L.toggleButtonState()}));const I=new class extends s{constructor(e){super({popupSelector:e}),this._cardImage=this._popupElement.querySelector(".modal__image"),this._cardTitle=this._popupElement.querySelector(".modal__preview-title")}open(e,t){this._cardImage.src=t,this._cardImage.alt=e,this._cardTitle.textContent=e,super.open()}}("#preview-image");I.setEventListeners();const q=new class extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._handleFormSubmit=t}open(e){super.open(),this._cardData=e}close(){this._popupForm.reset(),super.close()}setButtonText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}handleSubmit(e){e.preventDefault(),this._handleFormSubmit(this._cardData)}setEventListeners(){this._popupForm.addEventListener("submit",(e=>this.handleSubmit(e))),super.setEventListeners()}}("#delete-modal",(e=>{console.log("card",e)}));q.setEventListeners(),_.addEventListener("click",(()=>{C.toggleButtonState(),g.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,